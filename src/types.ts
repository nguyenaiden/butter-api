/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export type paths = {
    "/ping": {
      /** Tests the availability of the service and returns the current server time. */
      get: {
        /** Tests the availability of the service and returns the current server time. */
        responses: {
          200: components["responses"]["Ping"];
          default: components["responses"]["ServerError"];
        };
      };
    };
    "/authorization/{messageId}": {
      /** Removes funds from a user's account if sufficient funds are available. */
      put: {
        /** Removes funds from a user's account if sufficient funds are available. */
        requestBody: components["requestBodies"]["AuthorizationRequest"];
        responses: {
          201: components["responses"]["AuthorizationResponse"];
          default: components["responses"]["ServerError"];
        };
      };
    };
    "/load/{messageId}": {
      /** Adds funds to a user's account. */
      put: {
        /** Adds funds to a user's account. */
        requestBody: components["requestBodies"]["LoadRequest"];
        responses: {
          201: components["responses"]["LoadResponse"];
          default: components["responses"]["ServerError"];
        };
      };
    };
  };
  
  export type webhooks = Record<string, never>;
  
  export type components = {
    schemas: {
      Ping: {
        /**
         * Format: date-time 
         * @description Current server time
         */
        serverTime: string;
      };
      /** @description Error message */
      Error: {
        message: string;
        code?: string;
      };
      Amount: {
        /** @description The amount in the denomination of the currency. For example, $1 = '1.00' */
        amount: string;
        currency: string;
        debitOrCredit: components["schemas"]["DebitCredit"];
      };
      /**
       * @description Debit or Credit flag for the network transaction. A Debit deducts funds from a user. A credit adds funds to a user. 
       * @enum {string}
       */
      DebitCredit: "DEBIT" | "CREDIT";
      /**
       * @description The response code sent back to the network for the merchant. Multiple declines reasons may exist but only one will be sent back to the network. Advice messages will include the response code that was sent on our behalf. 
       * @enum {string}
       */
      ResponseCode: "APPROVED" | "DECLINED";
      /** @description Authorization request that needs to be processed. */
      AuthorizationRequest: {
        userId: string;
        messageId: string;
        transactionAmount: components["schemas"]["Amount"];
      };
      /** @description Load request that needs to be processed. */
      LoadRequest: {
        userId: string;
        messageId: string;
        transactionAmount: components["schemas"]["Amount"];
      };
      /** @description The result of an authorization */
      AuthorizationResponse: {
        userId: string;
        messageId: string;
        responseCode: components["schemas"]["ResponseCode"];
        balance: components["schemas"]["Amount"];
      };
      /** @description The result of a load. */
      LoadResponse: {
        userId: string;
        messageId: string;
        balance: components["schemas"]["Amount"];
      };
    };
    responses: {
      /** @description ping successful response */
      Ping: {
        content: {
          "application/json": components["schemas"]["Ping"];
        };
      };
      /** @description The result of an authorization */
      AuthorizationResponse: {
        content: {
          "application/json": components["schemas"]["AuthorizationResponse"];
        };
      };
      /** @description The result of an load */
      LoadResponse: {
        content: {
          "application/json": components["schemas"]["LoadResponse"];
        };
      };
      /** @description Server Error response */
      ServerError: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    parameters: {
      /** @description Unique identifier for a message */
      messageId: string;
    };
    requestBodies: {
      /** @description An authorization request message that needs to be decisioned. */
      AuthorizationRequest?: {
        content: {
          /**
           * @example {
           *   "messageId": "50e70c62-e480-49fc-bc1b-e991ac672173",
           *   "userId": "8786e2f9-d472-46a8-958f-d659880e723d",
           *   "transactionAmount": {
           *     "amount": "9000",
           *     "currency": "USD",
           *     "debitOrCredit": "DEBIT"
           *   }
           * }
           */
          "application/json": components["schemas"]["AuthorizationRequest"];
        };
      };
      /** @description A load request message that needs to be decisioned. This balance will be added to a user's balance. */
      LoadRequest?: {
        content: {
          /**
           * @example {
           *   "messageId": "55210c62-e480-asdf-bc1b-e991ac67FSAC",
           *   "userId": "2226e2f9-ih09-46a8-958f-d659880asdfD",
           *   "transactionAmount": {
           *     "amount": "100.23",
           *     "currency": "USD",
           *     "debitOrCredit": "CREDIT"
           *   }
           * }
           */
          "application/json": components["schemas"]["LoadRequest"];
        };
      };
    };
    headers: never;
    pathItems: never;
  };
  
  export type external = Record<string, never>;
  
  export type operations = Record<string, never>;
  